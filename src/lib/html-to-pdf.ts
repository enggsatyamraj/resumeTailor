/**
 * This module provides a simplified approach to PDF generation
 * by returning properly formatted HTML that can be rendered as a PDF
 * by the browser's native print functionality
 */

export function generateHtmlDocument(content: string, userName: string): string {
    // Convert newlines to <br> tags
    const htmlContent = content
        .replace(/\n/g, '<br>')
        .replace(/\t/g, '&nbsp;&nbsp;')
        .replace(/\s{2,}/g, match => '&nbsp;'.repeat(match.length));

    // Create a basic styled HTML document
    return `<!DOCTYPE html>
  <html>
  <head>
    <meta charset="utf-8">
    <title>${userName}'s Tailored Resume</title>
    <style>
      body {
        font-family: 'Helvetica', 'Arial', sans-serif;
        margin: 0;
        padding: 20px;
        color: #333;
        line-height: 1.5;
      }
      .page {
        max-width: 8.5in;
        margin: 0 auto;
        padding: 0.5in;
        border: 1px solid #eee;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
        background: white;
      }
      h1 {
        text-align: center;
        color: #2d3748;
        margin-bottom: 20px;
        font-size: 24px;
      }
      h2 {
        color: #2d3748;
        border-bottom: 2px solid #e2e8f0;
        padding-bottom: 5px;
        margin-top: 20px;
        font-size: 18px;
      }
      .section {
        margin-bottom: 20px;
      }
      @media print {
        body {
          padding: 0;
        }
        .page {
          box-shadow: none;
          border: none;
          padding: 0;
        }
        .no-print {
          display: none;
        }
      }
    </style>
  </head>
  <body>
    <div class="page">
      <h1>${userName}'s Tailored Resume</h1>
      <div class="content">
        ${htmlContent}
      </div>
    </div>
    <div class="no-print" style="text-align: center; margin-top: 20px; font-size: 14px; color: #666;">
      <p>This resume was generated by Resume Tailor app. Press Ctrl+P (or Cmd+P) to print or save as PDF.</p>
    </div>
  </body>
  </html>`;
}

// Create a download link for browser-based PDF generation
export function createDownloadableHtml(content: string, userName: string): Buffer {
    const htmlContent = generateHtmlDocument(content, userName);
    return Buffer.from(htmlContent, 'utf-8');
}